<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-08T00:53:53-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Mark Phillips</title><subtitle>American Americanist</subtitle><entry><title type="html">Natasha Pankina Illustrations</title><link href="http://localhost:4000/natasha-pankina/" rel="alternate" type="text/html" title="Natasha Pankina Illustrations" /><published>2019-12-01T00:00:00-08:00</published><updated>2019-12-01T00:00:00-08:00</updated><id>http://localhost:4000/natasha-pankina</id><content type="html" xml:base="http://localhost:4000/natasha-pankina/">&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/natasha.png&quot; alt=&quot;natasha&quot; style=&quot;width: 700px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;I had the pleasure of working with &lt;a href=&quot;https://natasha-pankina.com&quot;&gt;Natasha Pankina Illustrations&lt;/a&gt; for a month to build her own online illustrations store.  With tens of thousands of stock vectors, she needed a way to house, encode, format, watermark, fingerprint, and merchandise her works of art. The result is a highly customized Wordpress e-commerce store.  She has an easy to use upload her vectors. The site automatically processes the EXIF data as does Shutterstock to set all the store variables, categories, and licenses.  The system ingests the content, autocreates all the online resources, and license formats, and certain product queues allow for seasonal banner ads to automatically rotate in for merchandising. On the backend, is Glusterfs mounted on to a Docker Swarm, ready to scale, as demand requires.  What are you waiting for? Buy something!&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/natasha-2.png&quot; alt=&quot;natasha misc&quot; style=&quot;width: 700px;&quot; /&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Blockchain Presentation</title><link href="http://localhost:4000/blockchain-presentation/" rel="alternate" type="text/html" title="Blockchain Presentation" /><published>2019-11-14T00:00:00-08:00</published><updated>2019-11-14T00:00:00-08:00</updated><id>http://localhost:4000/blockchain-presentation</id><content type="html" xml:base="http://localhost:4000/blockchain-presentation/">&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/nodes.png&quot; alt=&quot;nodes&quot; style=&quot;width: 400px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;I was asked to present at Shenzhen’s Blockchain Week Conference. &lt;a href=&quot;/uploads/20191114_Blockchains.pptx&quot;&gt;Here&lt;/a&gt; are the slides.  I review the typees of concensus models which are out there.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/shenzhen-blockchain-wk.png&quot; alt=&quot;Shenzhen Blockchain Week&quot; style=&quot;width: 300px;&quot; /&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">MEOW ERC-20 Token</title><link href="http://localhost:4000/compuglobalhypermegacorp/" rel="alternate" type="text/html" title="MEOW ERC-20 Token" /><published>2019-10-01T00:00:00-07:00</published><updated>2019-10-01T00:00:00-07:00</updated><id>http://localhost:4000/compuglobalhypermegacorp</id><content type="html" xml:base="http://localhost:4000/compuglobalhypermegacorp/">&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/meow1.png&quot; alt=&quot;Mr. Whiskers&quot; style=&quot;width: 500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://compuglobalhypermegacorp.com&quot;&gt;Compuglobalhypermegacorp&lt;/a&gt;’s CEO Mr. Whiskers’s World Domination Token, the MEOW Coin.  My friends were asking me about what cryptocurrency they should invest in, with many of them lementing they already missed the bus. To make some of them feel better, I created MEOW so I could give all my friends millions of tokens. In fact, you don’t have to be a friend, I’ll send you a bunch of MEOWs, just ping me.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/compuglobalhypermegacorp&quot;&gt;Mr. Whiskers’ Whitepaper&lt;/a&gt; on &lt;strong&gt;Proof of Meow®&lt;/strong&gt; – provides solutions to classical computer science’s intractable problems including O(k^n), O(2^n), exponential; O(n!), factorial; and O(n^n ), super-exponential in “meow, hiss, purr, meow”.* &lt;a href=&quot;https://etherscan.io/token/0x4ed4DDd7981e347b673f697DC821965A3EB64b9c&quot;&gt;Etherscan.io&lt;/a&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/whitepaper001.jpg&quot; alt=&quot;white paper&quot; style=&quot;width: 500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Read Mr. Whisker’s whitepaper outlining the mechanics of “meow, purr, hiss”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pleasemarkdarkly/simpleblockchain&quot;&gt;Play with Mr. Whisker’s simple blockchain.&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">dotfiles</title><link href="http://localhost:4000/dotfiles/" rel="alternate" type="text/html" title="dotfiles" /><published>2019-09-01T00:00:00-07:00</published><updated>2019-09-01T00:00:00-07:00</updated><id>http://localhost:4000/dotfiles</id><content type="html" xml:base="http://localhost:4000/dotfiles/">&lt;p&gt;With &lt;a href=&quot;https://github.com/pleasemarkdarkly/bootstrap&quot;&gt;dotfiles&lt;/a&gt; being all the rage, I thought I would shove together my config. While it’s far from complete, what I did that I wish others would do, is break up the various program installs into files, i.e. apt, brew, npm, git, gem, are seperated into .list files. I can easily update them with either my latest list or tweak them. It seems that while lots of people have pretty interesting setups, its effort to try some else’s dotfiles then update them with our own twist. That said, I also include a Dockerfile which I used to test the installation process and for others to watch the install before trying it out on their machine. This setup fetches some config files from my servers, so you will want to read all the wgets and make sure you are comfortable with what my script is doing. As always, don’t trust my scripts, read them for yourself!&lt;/p&gt;</content><author><name></name></author><summary type="html">With dotfiles being all the rage, I thought I would shove together my config. While it’s far from complete, what I did that I wish others would do, is break up the various program installs into files, i.e. apt, brew, npm, git, gem, are seperated into .list files. I can easily update them with either my latest list or tweak them. It seems that while lots of people have pretty interesting setups, its effort to try some else’s dotfiles then update them with our own twist. That said, I also include a Dockerfile which I used to test the installation process and for others to watch the install before trying it out on their machine. This setup fetches some config files from my servers, so you will want to read all the wgets and make sure you are comfortable with what my script is doing. As always, don’t trust my scripts, read them for yourself!</summary></entry><entry><title type="html">WSDOT Collision Predictions</title><link href="http://localhost:4000/wsdot/" rel="alternate" type="text/html" title="WSDOT Collision Predictions" /><published>2019-07-25T00:00:00-07:00</published><updated>2019-07-25T00:00:00-07:00</updated><id>http://localhost:4000/wsdot</id><content type="html" xml:base="http://localhost:4000/wsdot/">&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/accidents.png&quot; alt=&quot;accident modeling&quot; style=&quot;width: 500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;To better understand accidents in the Northwest, I processed the WSDOT’s data on serious to fatal accidents. Specifically, I processed the WSDOT reported collisions and mapped them to the nearest intersections, ranked, color-coded our 500 top dangerous intersections and displayed them on a heatmap by the frequency of accidents by date and time.&lt;/p&gt;

&lt;p&gt;I requested WSDOT to provide Northwest collisions between 2015 through June 2018 which I parsed grouping by city and date, then used Alteryx to forecast by week accidents after which I use Python to weight each day afterwhich I feed into Tableau for visualization. The result is a map of our area that uses the current day to present locations which have been historically and forecasted to be probable for collisions.&lt;/p&gt;

&lt;p&gt;The code and dataset may be accessed &lt;a href=&quot;https://github.com/pleasemarkdarkly/wsdot_visualization&quot;&gt;here&lt;/a&gt;. The code consists of three scripts. The first one, “wsdot_parser.py”, will open the WSDOT dataset. Please note that the code assumes that the dataset will be on the same folder level and named “king.csv”. This script will generate two derived datasets: “weekday_coeffs.csv” and “weekly_table.csv”.&lt;/p&gt;

&lt;p&gt;The first is a table where the general probability of an accident per city and weekday (Monday-Sunday) is represented by a number (0 to 1). The second one is the aggregate accidents per week over the full dataset grouped by city. Each row represents a week and it just counts the number of accidents that happened on that week at that city.&lt;/p&gt;

&lt;p&gt;To do the actual forecast Alteryx Designed is required. The script provided (“arima_iter.yxmc”) will produce a forecast of accidents for the selected city (you must manually choose it in the Alteryx interface). This forecast is per week and each row represents a week for that city and is the result of an ARIMA model fit to the whole dataset per city and week.&lt;/p&gt;

&lt;p&gt;Once all the cities have a forecast then the Python script “merger.py” will produce the final forecast for the next 16 weeks starting on the last date found on the WSDOT dataset. The general forecast for a week is spread between the days of that week, weighting each day by the weekday coefficient previously computed. At the end, the file “full_forecast.csv” is produced as the final output. This file can feed Tableau to create a visualization.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">docker_mac_apt</title><link href="http://localhost:4000/mac-apt/" rel="alternate" type="text/html" title="docker_mac_apt" /><published>2019-06-12T00:00:00-07:00</published><updated>2019-06-12T00:00:00-07:00</updated><id>http://localhost:4000/mac-apt</id><content type="html" xml:base="http://localhost:4000/mac-apt/">&lt;p&gt;&lt;a href=&quot;https://github.com/markedphillips/docker_mac_apt&quot;&gt;MacOSX forensic analysis framework containerized.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;mac_apt is a python based framework, which has plugins to process individual artifacts (such as Safari internet history, Network interfaces, Recently used files, Spotlight typed searches..) The framework does the heavy lifting, parsing of disk/volume image and offers a unified output interface, which currently supports writing out data as CSV, Sqlite and Excel formats. There is an API which plugins can use to access files and folders within the disk image. Currently DD and E01 images are supported. DMG files without compression work too. You can use a mounted image too (with limited support on windows for this feature). We even put in a native HFS parser adding support for lzvn/lzfse compressed files.&lt;/p&gt;</content><author><name></name></author><summary type="html">MacOSX forensic analysis framework containerized.</summary></entry><entry><title type="html">For the Record to Transcripts</title><link href="http://localhost:4000/ftr-transcripts/" rel="alternate" type="text/html" title="For the Record to Transcripts" /><published>2019-05-19T00:00:00-07:00</published><updated>2019-05-19T00:00:00-07:00</updated><id>http://localhost:4000/ftr-transcripts</id><content type="html" xml:base="http://localhost:4000/ftr-transcripts/">&lt;p&gt;&lt;a href=&quot;https://github.com/pleasemarkdarkly/speech-to-text-batch&quot;&gt;For the Record Court Audio to ML transcripts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A lawyer asked me if I knew a simple way to convert a large volume of Court testimony to transcripts without having to order the entire testimony’s transcription. As I couldn’t find anyting cheaper than $1/minute, I turned to Amazon and Google APIs for audio to text transcription. The cost was something like .006 to .009 every 15 seconds and that’s after the $300 a year gift. The above repo is a collection of BASH scripts and Python which chunk up the audio and send them off for transcripting. I hope no one has to use this, but it works really well.&lt;/p&gt;</content><author><name></name></author><summary type="html">For the Record Court Audio to ML transcripts</summary></entry><entry><title type="html">Greenplay Format</title><link href="http://localhost:4000/modpod/" rel="alternate" type="text/html" title="Greenplay Format" /><published>2006-01-01T00:00:00-08:00</published><updated>2006-01-01T00:00:00-08:00</updated><id>http://localhost:4000/modpod</id><content type="html" xml:base="http://localhost:4000/modpod/">&lt;p&gt;With the vision of creating an in-store and at home experience for content distribution. Greenplay was an end-to-end system with content licensing; all North American music and Warner Brothers/Paramount video content, merchandising in-store DVD/HD-DVD/Bluray product sales, music downloads, and at home streaming content on Greenplay set top boxes. The below in-store PODs and at home players were developed.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/pod.png&quot; alt=&quot;POD&quot; style=&quot;width: 700px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;A self-enclosed, flat-panel device for retailers to offer in-store sampling, purchasing and fulfillment of digital music and movies.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/greenplay.png&quot; alt=&quot;Greenplay&quot; style=&quot;width: 700px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Studio approved video content purchsae and rental through SD cards and PC peripherals, including $99 video player.&lt;/p&gt;

&lt;p&gt;In 2000, after the wide spread adoption of Napster and RIAA Lawsuits against the Rio mp3 player, large scale mp3 downloads were destroying the retail businesses behind traditional music distribution.  One such company Transworld Entertainment licensed our software and hardware to better engage with custoemrs. The listening and viewing station was born and this system was the largest system of its kind, due to cost, ease of installation, and impact to “retail lift.”&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/starbucks.png&quot; alt=&quot;Starbucks&quot; style=&quot;width: 700px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;In 2005, A DOT was hired by Starbucks to develop the Hear Music in-store music system.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/lvs.png&quot; alt=&quot;LVS&quot; style=&quot;width: 700px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;In-store listening and viewing station that uses Windows Media technology to store and stream content; lets shoppers scan and preview any CD or DVD in retailer’s catalog and enables use cross merchandising, loyalty programs, point-of-sale integration, and chain-wide “try and buy”programs. Deployed in more than 600 stores and 13,000 stations (as of 2010).&lt;/p&gt;</content><author><name></name></author><summary type="html">With the vision of creating an in-store and at home experience for content distribution. Greenplay was an end-to-end system with content licensing; all North American music and Warner Brothers/Paramount video content, merchandising in-store DVD/HD-DVD/Bluray product sales, music downloads, and at home streaming content on Greenplay set top boxes. The below in-store PODs and at home players were developed.</summary></entry><entry><title type="html">SPOT and MSN Direct</title><link href="http://localhost:4000/spot/" rel="alternate" type="text/html" title="SPOT and MSN Direct" /><published>2005-01-01T00:00:00-08:00</published><updated>2005-01-01T00:00:00-08:00</updated><id>http://localhost:4000/spot</id><content type="html" xml:base="http://localhost:4000/spot/">&lt;p&gt;Microsoft’s Research &lt;a href=&quot;https://en.wikipedia.org/wiki/Smart_Personal_Objects_Technology&quot;&gt;Smart Personal Objects&lt;/a&gt; and the MSN Direct Network was in development from 2001 until launch in 2005. Showcased at Comdex in 2002. From 2001 through 2005, we worked on many aspects of the systemn.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/spot.jpg&quot; alt=&quot;MSN Direct&quot; style=&quot;width: 500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Architecture that enables peer-to-peer communication between SPOT devices, specifically SPOT watches. Example channels include Peer to Peer Poker, Chat, and Eightball.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/dotnetcpu.jpg&quot; alt=&quot;.netcpu&quot; style=&quot;width: 500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Commercial BASIC Stamp chip developed for educational purposes using portions of Microsoft’s SPOT technology to execute C# code and an embedded TinyCLR (Common Language Runtime).&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/datacard.jpg&quot; alt=&quot;datacard&quot; style=&quot;width: 500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Credit card sized PDA with touch pad.&lt;/p&gt;</content><author><name></name></author><summary type="html">Microsoft’s Research Smart Personal Objects and the MSN Direct Network was in development from 2001 until launch in 2005. Showcased at Comdex in 2002. From 2001 through 2005, we worked on many aspects of the systemn.</summary></entry><entry><title type="html">Give Me My Stuff Back</title><link href="http://localhost:4000/givemystuffback/" rel="alternate" type="text/html" title="Give Me My Stuff Back" /><published>2005-01-01T00:00:00-08:00</published><updated>2005-01-01T00:00:00-08:00</updated><id>http://localhost:4000/givemystuffback</id><content type="html" xml:base="http://localhost:4000/givemystuffback/">&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/givememystuffback.jpg&quot; alt=&quot;givememystuffback&quot; style=&quot;width: 500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;When Amazon opened up their online store API, as a joke we created this website that would track peer to peer loans and remind parties when the loan was due or the item needed to be returned. During the expiration period, the system would remind the parties, as well as provide options for each party to replace the item or gift the item using Amazon Web Services. While the idea was cute, no one used the services. We blame marketing.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry></feed>